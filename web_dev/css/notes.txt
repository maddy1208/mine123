-------------------------------CSS NOTES-------------------------------------
CSS FUNDAMENTALS:

Link rules:
inline,internal,external

Font Properties:
    font-family:Arial, Helvetica, sans-serif;
    font-style: italic;
    font-variant: small-caps;
    font-weight: bolder;
    font-size: 100px;
    color: blue;
    one liner => font: bold 12px Arial;
    note:
    using import vs link to import font;  link is better as it gives performance and faster reder but import loads after css parsing

Background properties:
    background-color: antiquewhite;
    background-image: url("https://t4.ftcdn.net/jpg/06/29/35/69/360_F_629356922_KB0F6hwZpSItiNyolBXflK2rb46iaeBx.jpg");
    background-image:url(oi.png)
    background-image:url("./oi.png")
    bg-size: 3000px 300px
    background-repeat: no-repeat,repeat,repeat-x,repeat-y
    background-position: top,center,bottom,right,left center, //positiona control panlam
    background-size: 400px 400px,contain,cover // siza contrl pana
    background-attachment: scroll,fixed //
    background-origin:content-box,padding-box,border-box //image set aagum
    background-clip: text //image text kooda merge aidu
    background-blend: normal,blend,overlay,darken,hardlight,softlifht,multiply,difference,... //image kooda color merge aidum
    background =>oneliner


GRADIENT:
    //only for background,bg-image,border-images aapr konjam 

    background: linear-gradient(to right, red ,blue);
    bg: linear-gradient(red,blue,green)
    bg: linear-gradient(to botom red,blue)
    bg: linear-gradient(to top  red,blue)
    bg: linear-gradient(to right  red,blue)
    bg: linear-gradient(to  left red,blue)
    bg: linear-gradient(to bootom right red,blue)
    bg: linear-gradient(to bootom right red,blue)

OPACITY:
    opacity:0.9 //transparencyaa control panlaam

TEXT-PROPERTIES:
    letter-spacing: //
    text-decoration: underline,overline,linethrough // decoration
    vertical-align: sub,super //power la varu
    text-transform: upper,lower
    text-align: center,jusitify(jusitify=>adjust to full width)
    text-indent: 10px //starting la space varu
    line-height //gap between lines

LIST PROPERTIES:
    list-style-type: square,circle,disc,decimal,lower-roman,upper-roman,,none,et..
    list-style-image: url('./oi.png)
    list-style-position: outside,inside //positionaa control panlaam

MARGIN:
    =>outer space
    margin:top right bottom left
    margin: vertical horizontal
    margin all

PADDING:
    =>inner space
    margin:top right bottom left
    margin: vertical horizontal
    margin all

BORDER PROPS:
    border-width:thin,medium,thick,length
    border-color:
    border style:none,solid,double,groove,ridge,inset,outset

COMMENT:
    /*.....*/

 CLASS,ID'S:

 .class{ //classa style paniklaam }
 #id{ //ida style paniklaam }

DISPLAY PROPS:

    p,etc..=>block level elements means parent oda full widthaa eduthukum
    b,i => idhu block level elementx ila

    b{
        display: block// so ipo bold tag full widthaa eduthukum
        display: none //totalla maranchidum
        display:inline;Width and height cannot be set.
        display:inline-block;Width and height can be set.
    }


TABLE STYLING PROPS:

    <TABLE BORDER=9PX WIDTH=100% CELLPADDING=7PX CELLSPACING=7PX>

    table{

        border:collapse //border single linele varum
    }

    <caption> => like tabeloda label maranchidum
    rowpan,colspan =>td la use pnalm for row,colum merging

    <tfoot> =>like tableoda footer maari

    <table>
    <colgroup> 
    col width =50px //colum oda width,bg a customize paniklaam with hlp of colgroup
    col
    <colgroup>
    </table>

STYLE PREFERENCE:
    #id => ist prefeence 
    .class => 2nd preference 
    p =>direct elements ku 3rd prefernce 

    also elom default pref override pan !important use panlam
    eg:

    p{ color: green !important} //ipo indha style elothiyum override panidum bcz we used important 


CSS SELECTORS:
    h1,p, .class1,#oi {} //ipdi multile elemts ku style pnlaam
   div[class]
   div[class="oi"],etc...

PSEUDO CLASS:
    a:hover{}
    a:active{}
    a:visited{}

BORDER RADIUS:
    border radius :5px// aplly to all sides
    border radius : 1 2 3 4 //specific side

BOX-SHADOW: //LIKE ORU SHADOW maari
    box-shadow: 5 5 5 5 rgba();

BOX-MODEL:
padding,margin,border idhelaam correcta manage pandradhu

auto=> like browser defaultaaa decide panum..


FLOW:
flow:right
=>idhu apde right la arrange aagum,the next content pakayhule varum


POSITION PROPERTIES:
1.STATIC
default property, idhula peopretiesa move la pan amudyaadhyu
this helps to have default flow from top to bottom...
2.REALTIVE (LRTB)
normal position la irundhu position maarum
3.ABSOLUTE ((LRTB))
absolute will postion acc to the parent which has relative property
[Positioned relative to the nearest positioned ancestor (i.e., parent with position: relative, absolute, or fixed)

If no such ancestor, then it uses the <html> (the page) as reference.]
4.FIXED
 It never moves, even user scrolls 
 also idhu html documnet ku base pani work aagum
5.STICKY
it moves and stick to particulay position,when scrolls


ðŸ”¹ justify-content

Used in: Flexbox or Grid containers
Purpose: Align children along the main axis
(For flexbox: row â†’ horizontal axis, column â†’ vertical axis)

ðŸ”¹ align-items

Used in: Flexbox or Grid containers
Purpose: Align children along the cross axis
(Main axis = row â†’ cross axis = column)

ðŸ”¹ text-align

Used in: Any element that contains text or inline content
Purpose: Aligns text inside the element

Z INDEX:
like layer maari, endha layer first la varnumnu decide paniklaam
also endha zindex oda value adhigama irukoo,adhu layerku first la varum

OUTline LINE:
border ku velila oru,outline varu
outline-col: green
outline-style:dotted (stylaa decide paniklam)
outline-offset:2px (border la irundhu evlo gap varnumnu decide paniklaam)


OVERFLOW:
specified,height ila widtha vida content adhigamaa irundhaa overflow vachi conterol panlaam
overflow: hidden (extra contents hide aidum)
overflow: scroll (extra contents a scroll paniklaam)
overflow-y:
overflow-x : particular axis la control pniklaam

MIN,MAX HEIGTH,WIDTH:
heigt,widtha control paniklaaam

BOX-SIZING:
normala padding,margin increase panna, actual content kooda extra spaces add agum,
so ,nerya width,height increase agum,so idhu actual sizaa affect panum .

border-box=> idhu sizaa affect panaadhu
content-box=> idhu sizaa affect pnum


COLUMN:
like newspaperla vara column maari neryaa column vachiklaam div kulle

column-count: evlo columns venumo adhu
column-width: width set paniklaam
column-gap: gap between columns
column-rule: 2px solid blue  (oru vertical line varum)

column-span:all; (heading ku laa use panlammm.elo columkummm melaa full widtha eduthukum,
instead of position at a particular column);


CSS UNITS:
ABsolute: 
px :
(size maarave maardhu)


relative(acc to parent work aagum)

%:
 eg: width:50% ( parent oda 50% width eduthukum)
em :
1em=16px (browser default size,nama settings la kooda change paniklaam)
so,browser ku ethamaari em work aagum eg:2em=36px
incase parent itundchinaa parent oda default size eduthukum
eg: .parent{font-size:5px} .child{fomtsize:2em} =>means child oda fontsize 2*5=10px

So,parent ku font size property nam koduklana, browser oda sizaa eduthukum,
incase nama specify panna, adhu parent siza eduthukum relativa..

rem:(root em)
idhu straightaaa html tag oda font sizaa defaulta edukukm,
even nerya parent irundhaalum, root aana html oda sizaa idhu ema  eduthukum..

viewport works acc to screen size not browser
vh:(viewport height)
vw:(viewport width)
eg: height:20vw (means 20 percentage)

vmax
vmin (similar but min,max sizaa base pani work aagum)
 eg: height: 20vmin
     width: 30vmax

PSEUDO CLASS:
root=>like variable vachi use paniklaam,nama root kulle declare pandra elothiyum variabale maari use paniklaam with help of var(<name>)
:root{
    --bgcolor:blue;
    --color:white;
}
h1{
    color:var(--bgcolor)
}


TRANSITION:
transition property:width,height (engee transition nadaknumo adhu)
transition duration :9s
transition delay
transition timing function:linera,ease,ease-in,ease-out,etc..
transition: all 0.5s ease-in 1s (short property)


-----------------CSS GRID,FLEX,ADVANCED CONCEPTS-----------------------------------

FLEX-BOX:
display:flex (to make flex container)
flex-direction: (decides the direction flow of flex elements)
flex-wrap: elements container kulle epdi wrap aagnumnu 
justify-content: flex-start,flex-end,space-between,center (elemts oda x axis positionaa control pnalam)
align-items or align-content: y axis aacontrol panlaam

One line of items (flex-wrap: nowrap)
    âœ… Use align-items
Multiple lines of items (flex-wrap: wrap)
    âœ… Use align-content to align the rows as a block
    âœ… Use align-items to align items within each row
order (flex child kulle use panlamm eg: order ;4,3,1,2 ipdi kooda box position paniklaam)
align-self: particular ement style kulla apply aagun,vertical positiona control paniklaam
flex-grow (elementoda sizaa ratio control panlamm)
eg: box1{flex-grow:1} box2{flex-grow:2}

flex-shrink {opposite to grow}

Use text-align when:
Aligning text inside a block (div, p, span, etc.)
Centering inline/inline-block elements inside a block



FLEX:
display:flex => full widtha eduthukum
display:inline-flex => acc to content widtha eduthukum

flex-wrap:no-wrap => browser size decrease pnaa elemts apde irukum
flex-wrap: wrap =>browser size decrease pnaa elemts keela varum,so elo elemtsum visiblaa irukum even browsr size china dhaanalum
flex-wrap:wrap-reverse => similar to wrap but,browser sizaa decrease pnaa elemts mela pogum
flex-flow: combination 0f both flex-direction + flex-wrap
flex-flow: <flex-direction> <flex-wrap>
  simpla one liner maari instead of 2 separate properties

gap: determines gap between elemts in flex-container
row-gap: gap space between roows
column-gap: gap space between columns
gap: 40px  20px
gap: row   column
gap: 40x (simplaa elo sidelayu(row+column))

align-items: stretch/no-stretch (particular contentku size)
align-items: flex-start/flex-end/center
align-items: baseline (even oru sila elemt oda fontsize perusaa irundhaalum, ore line la elo align aagum)

align-content:(mothama content closaa irukum instead of separate elemt, basicaa nerya gap reduce aagum)

order: can decide which elemt to align in order

flex-grow: 1 (remaining gap eduthukum,total flex container la irukaedha)

flex-shrink: 1(browser chinadhachinaa shrink aagum)

flex-basis:400px (initialla particular elementku size assin paniklaam)

flex: <grow> <shrink> <basis> (like oneliner)

align:self (particular itemaa alogn paniklaam)

GRID::::

=> 2d styling
display: grid =>
display: inline-grid => complete widtha eduthukaama,particular content ku work aagum

grid-template-columns:
    grid-template-columns: 150px 100px 250px 500px 600px;
    grid-template-columns: 200px 200px 200px 200px;
    grid-template-columns: repeat(3,400px);
    grid-template-columns: repeat(3,400px) 100px;
    grid-template-columns: repeat(3,3fr); //fr = fraction correcta size vailam
    grid-template-columns: repeat(3,minmax(200px,2fr));

(columns oda sizaa control panlaam)

grid-template-rows:
  similar to above,but rows sizaa control panlaam

grid-template: <row> /<column> (one liner)
//basocaa template rows,column countaa manage panna

gap:
gap: <row+column>
gap: <roe> <column>
gap-column: <column>
gap-row: <roe>

justify-items: x axisaa control panlamm elo ,acc to elemt 
align-items: y axisaa control panlam,acc to elemt
placeitems: <alignitem> <justufyitem> //oneliner maari


justify-content: mothama elo elemtyasyu x axis la control panlaam
align-content: mothamm elo elemtsayuu y axis la control panlaam
placecontent: <justifyconent> <alignpcontent>


grid-auto-flow: row/column (to choose the flow of grid)
grid-auto-rows: 100px (can size tge rows)
grid-auto-columns:100px (can size the columns)
(similar to grid-template but automatucaa work aagum,eve we add rows or columns)

    grid-column-start: 1;
    grid-column-end: 4; // evlo boxes cover agnumnu, like grid lines a base pani

    grid-rows-end: 1
    grid-rows-start: 4 // evlo boxes row wise cover aagnumnu 

grid-colun: <grid-column-start>  <grid-column-end> //oneliner
grid-row: <grid-row-start>  <grid-row-end> //oneliner


//particuarra oru elemt oda positiona mathanumnaa idha use panlaam
justify-self
align-self
place-sefl

//grid template areas: 
   grid-template-areas: 
    'header header header' 
    'nav content sidebar' 
    'footer footer footer';
    grid-template-columns: 1fr 5fr 1fr;
    grid-template-rows: 1fr 5fr  1fr;



CSS TRANSITION:
transition-property: width,height,bg-color;
transition-duration: 1s 2s 3s //ipdi specificaa select paniklaam

elo elemtskum at a time same transitiinku,
transition: all 1s //ipfi kodiklaam
transitiom: height,width 1s,2s; //ipiyum podlaam
transition-delay: 2s //delay for transition
transitiin: all 2s ease-in: //timing-function use paniklaam


MORE ABOUT SELECTORS,COMBINATORS,PSEUDOO CLASSES,PSEUDO ELEMENTS:

Selectors:

Universal selector(*) 
    Elo elementskum work aagum
    *{}

Element Selector
    particular tag la work paniklaam
    p{}

Class Selector
    particular classku work aagum
    .class{}

ID Selector
    particular id la wprk panlamm
    #id{}

Specific class selector
    h1.class{} //means h1 with .class tags so,h1+.class

Grouping Selector
   nreya elemtsku style podlaam
   h1,h2,p{}
   .class,.class2{}

Descendant Selector
   div p {} //div kulle irukra para tag ,but idhu div kulle irukra non childkum work aagumso simplaa kulee irukra elothukum

Child Selector
   div > p{} //div oda chuld matum sleect aagum

Adjacent Selector 
   div + p{ } //div ku pakathula para irundha slt aagum

General Sibling Selector
   div ~ p{} //div pakathulka iruka para elom slt aagum

-------------------------------Pseudo-Elemnt------------------------------------------------------------

::
p::first-line{} //first line matum selct panlaam, also block leevl elemts ku matu work aggumeg:span ku la work aagadhu

h2::first-letter{} //first lettera matum change panlaam,also udhuvum black elemntku matu work aagum

p::firstline{}
p::first-letter{} //ipdi multiple psedu properties apply panlaam, oru elemnt ku

p::before{ conetet:"oi"}
p::after{content:"oi"} //beforekum,afterkum work agum


   
::marker // list oda styles andh numbers,roman letters

ul li ::marker{
    content: '<emoji>';
}

h3{
    counter-increment:mylist  //nama oru variable maari declare pandro,
}
h3::marker{
    display: list-item; //note even h3 kooda list itema change panlam
    content :"#" counter (mylist) ""; //andha increement varialaa use pandrom
}

::selection{} //user selct panaa work aagum

::placeholder{} //inputs kule irukra placeholdera style paniklaam

ATTRIBUTE SELECTORS

input[title]{} //input with title attributes elom select agum
a[target]{} //a with target attr elom style agum
img[alt]{}

input [title="oi"] //titlle eaxcta oi na matum select aagum
input [type="text"] //typwe exacta text na matum select aagum
img [width="75px] //width exacta 75px na matum select agum


input [title~="oi"] //even nerya class irundhaalum title oi match agum,
input [title^-"oi"] //title oi start la irundhaa matum aagum
input [title$-"oi"] //title oi end la irundhaa matum aagum
input [title*="oi"] //just oi irunshale select agum
input [title|="oi"] //oi ku aprm "-" irundhaa select agum eg: <input title="oi-sam">


input:enabled{}
input:disabled{}
input[type="radio"]:checked{}
input[type="radio"]:not(:checked){}

input:placeholder-shown{} //placeholder visiblaa irukumpodhuu
input:not(placeholder-shown){} //placeholder visiblaa iladhapodhu style paniklaam

input:focus{} //input type panumpodho,click panumpodhi style paniklaam

input:valid{} //validaa input vandhchunaa style paniklaam (eg:incase we specified type=email)
input:invalid{} //invalidna indha style vachiklaam

input:required{} //required fieldsa style paniklaaam
input:optional{} //optional fieldsaa style paniklaam

input:read-only{}
input:read-write{}

input:in-range{} //eg: <input type="numner" min="1" max="5"> 
input:out-of-range{} // incase user range la iladha numberaa type pana

option:default{} //
input: default  + label{ color:green} //eg:checkbox checked la irundhaa,adhoda pakathu label style panikroo


:link {}
:hover {} //hover panumpodhu
:visited{} //eg:linksaa visit panna
:active{}  // eg: link clickpanumpodhu
:target  //particular content target aagumpodhu

-------------------parent,child-----------------

:first-child //1st childaa irundhaa style panlam eg:li:first-child
:last-child //last childaa irundhaa style panlam eg:li:last-style

:first-of-type //even parent ilanaalum elemysku work aagum
:last-of-type //even parent ilanaalum work aagum, elo elemtsku


:nth-child(odd)
:nth-child(even)
:nth-child(2n/2n+1/3n,etc...) //epdi venalum select paniklaam
:nth-last-child() //last la irundhu select paniklaam

:nth-of-type(1) //idhu elothukum style panum,even parent ilanaalum
:nth-last-of-type(1) //idhu elothukum style panum reverse la irundhu,even parent ilanaalum

:only-child //it works only for elemts that is only one child for the parent
:only-of-type() //similar but even parent ilanaalum work aagum

:empty{} //empty elemts ku work aagum eg: div:empty{} //div emptyaa irundhaa style apply aagum


-----------------------------------------------------
outline offset: gap between outine and brder

Use Multiple Google Fonts:
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Audiowide|Sofia|Trirong">

priority(specificity):
Inline style >Id selectors>Classes and pseudo-classes >Attributes [type="text"] >Elements and pseudo-elements

CSS MATH func:
  width: max(50%, 300px);
  width: min(50%, 300px);
  width: calc(100% - 100px);

CSS PERFORMANCE
1. Use Simple Selectors

Complex selectors take longer for the browser to match. Keep them simple when possible.
Bad Example
ul li a.button:hover {
  background-color: blue;
}
Better Example
.button:hover {
  background-color: blue;
}
2. Avoid Universal Selector for Styling

Using * affects every element and can slow down page rendering.
Bad Example
* {
  margin: 0;
  padding: 0;
}
3. Avoid Inline Styles

Inline styles make your HTML heavier and are harder to manage and cache.
Bad Example
<div style="color: red; font-size: 18px;">Hello</div>
4. Combine and Minify CSS

Use one CSS file when possible, and remove spaces and comments to reduce file size.

You can use tools like:

    CSS Minifier
    PostCSS
    Online compressors

5. Load CSS Efficiently

Place your main CSS in the <head> so it loads before your page is rendered.
Example
<link rel="stylesheet" href="style.css">

Avoid using @import for loading CSS, as it delays stylesheet loading.
6. Use Shorthand Properties

Using shorthand properties saves space and is faster to parse.
Example
/* Long version */
margin-top: 10px;
margin-right: 20px;
margin-bottom: 10px;
margin-left: 20px;

/* Shorthand version */
margin: 10px 20px;
7. Cache Your CSS

Make sure your CSS file is cached by the browser by giving it a long expiration time in your server settings. This reduces how often users need to re-download it.
Summary

    Keep selectors short and simple
    Avoid layout-thrashing operations
    Use external, minified, and cached stylesheets
    Use efficient hiding and animation techniques

double bg:
  background: url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat;

CSS IMAEG STYLING: ,ma querries,animation,sass: REFER

cCENTERING:
img {
  display: block;
  margin: auto;
  width: 50%;
}

CSS Resizing

The resize property specifies if (and how) an element should be resizable by the user.
EG: div {
  resize: both;
  overflow: auto;
}

In many browsers, <textarea> is resizable by default. Here, we have used the resize property to disable the resizability:
Example
textarea {
  resize: none;
}

