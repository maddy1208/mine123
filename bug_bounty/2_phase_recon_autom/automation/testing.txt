


1.burp
2.k_automation
3.nuclei
4.cves
5.individual testing =>see below










https://github.com/0xKayala/NucleiFuzzer

open:
getting urls:
cat final.txt | grep -Pi "returnUrl=|continue=|dest=|destination=|forward=|go=|goto=|login\?to=|login_url=|logout=|next=|next_page=|out=|g=|redir=|redirect=|redirect_to=|redirect_uri=|redirect_url=|return=|returnTo=|return_path=|return_to=|return_url=|rurl=|site=|target=|to=|uri=|url=|qurl=|rit_url=|jump=|jump_url=|originUrl=|origin=|Url=|desturl=|u=|Redirect=|location=|ReturnUrl=|redirect_url=|redirect_to=|forward_to=|forward_url=|destination_url=|jump_to=|go_to=|goto_url=|target_url=|redirect_link=" | tee redirect_params.txt


python3 linkfinder.py -i https://example.com -o cli

https://virustotal.com/vtapi/v2/domain/report?apikey=[YOUR_API_KEY]&domain=target.com


usimg httpx:

cat redirect_params.txt | qsreplace "https://evil.com" | httpx-toolkit -silent -fr -mr "evil.com"

cat urls.txt | gf redirect | uro | qsreplace "https://evil.com" | httpx-toolkit -silent -fr -mr "evil.com"


using curl:

 cat urls.txt | qsreplace "https://evil.com" | xargs -I {} curl -s -o /dev/null -w "%{url_effective} -> %{redirect_url}\n" {}
 


using loxs tool:
cat urls.txt | sed 's/=.*/=/' | uro >loxs.txt =>idha ipo loxs toola use pnlaa


using nuclei:
cat subdomains.txt | nuclei -t openRedirect.yaml -c 30


using rust scanner:
cargo build
cargo run
refer automation/tools

aadvanced oneliner:

cat urls.txt | gf redirect | while read url; do
    cat loxs/payloads.txt | while read payload; do
        echo "$url" | qsreplace "$payload" | httpx -silent -fr -mr "google.com"
    done
done



